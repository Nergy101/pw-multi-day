name: Tuesday Pipeline - Scheduled

on:
  schedule:
    # Tuesday 9 AM UTC
    - cron: "0 9 * * 2"
  workflow_dispatch: # Allow manual triggering

jobs:
  validate-report:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Install Playwright Browsers
        run: deno task install

      - name: Install Playwright Dependencies
        run: deno cache --reload tests/

      - name: Find latest Monday pipeline run
        id: find-run
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get the workflow ID for the Monday pipeline
          WORKFLOW_ID=$(gh api repos/${{ github.repository }}/actions/workflows/monday-pipeline-scheduled.yml --jq '.id')

          # Find the most recent successful run of the Monday pipeline
          LATEST_RUN=$(gh api repos/${{ github.repository }}/actions/workflows/$WORKFLOW_ID/runs \
            --jq '.workflow_runs[] | select(.conclusion == "success") | .id' | head -1)

          if [ -n "$LATEST_RUN" ]; then
            echo "run_id=$LATEST_RUN" >> $GITHUB_OUTPUT
            echo "Found Monday pipeline run: $LATEST_RUN"
          else
            echo "No successful Monday pipeline run found"
            exit 1
          fi

      - name: Download Monday artifact
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "üì• Downloading artifact from run: ${{ steps.find-run.outputs.run_id }}"
          gh run download ${{ steps.find-run.outputs.run_id }} --name identifier-data --dir downloaded-artifacts || {
            echo "‚ö†Ô∏è  Failed to download artifact using gh run download"
            echo "üí° This could be because:"
            echo "   - The artifact has expired"
            echo "   - The artifact name is different"
            echo "   - There are permission issues"
            echo "   - The run doesn't exist"
            exit 0  # Continue with fallback data
          }

      - name: Check if artifact was downloaded
        id: check-artifact
        run: |
          echo "üîç Checking for downloaded artifacts..."
          echo "üìÅ Current directory: $(pwd)"
          echo "üìÅ Contents of downloaded-artifacts:"
          ls -la downloaded-artifacts/ 2>/dev/null || echo "Directory doesn't exist or is empty"

          if [ -d "downloaded-artifacts" ] && [ "$(ls -A downloaded-artifacts)" ]; then
            echo "artifact_found=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Monday artifact found and downloaded"
            echo "üìã Files found:"
            ls -la downloaded-artifacts/
          else
            echo "artifact_found=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  Monday artifact not found - will use fallback data"
            echo "üí° This could be because:"
            echo "   - The Monday pipeline hasn't run yet"
            echo "   - The artifact has expired (30-day retention)"
            echo "   - The artifact is in a different repository"
            echo "   - There was an issue with the download"
          fi

      - name: Run validation test using downloaded identifiers
        run: |
          mkdir -p output
          if [ "${{ steps.check-artifact.outputs.artifact_found }}" == "true" ]; then
            cp -r downloaded-artifacts/* output/
            echo "Using downloaded artifact data"
          else
            echo "Using fallback data (validation test will create sample data)"
          fi
          deno task test:validate

      - name: Upload validation results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: validation-results
          path: output/
          retention-days: 30
